# ------------------------------------------------------------------------------
# GENERAL APPROACH INSTRUCTIONS
# This YAML file contains the instructions for the general approach to the
# characterization task. It includes the main instructions and the sources to be
# included in the prompt.
#
# PROMPT ORDER: The final prompt will be constructed as:
# 1. main_instructions (always first)
# 2. sources (in the order listed below)
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# SOURCES CONFIGURATION
# List the keys (information sources) you want to include in the LLM prompt.
# - Predefined sources (from TMPD class) have fixed names and are always available.
# - Custom sources (added to this YAML file) must match keys defined elsewhere in this file.
# - The prompt will include the content of each selected key, in the order listed.
# - You can add custom keys (e.g., business_rules, domain_knowledge, guidelines)
#   and include them here to inject additional context or instructions.
# - Supported value types: dict, list, string, or any YAML-supported structure.
# - To exclude a source, simply remove it from the list or comment it out with #.
#
# Predefined sources (from TMPD class):

#   - reference_window_df: Transition matrix BEFORE change with columns:
#       * activity_from, activity_to: transition identifiers (always available)
#       * frequency, percentual: control-flow metrics (always available)
#       * Additional columns depend on user configuration (time, resource, data metrics)
#       Use to show the process structure and metrics before the drift/change.
#   - detection_window_df: Transition matrix AFTER change with same structure as reference_window_df.
#       Use to show the process structure and metrics after the drift/change.
#   - changed_transitions: Comprehensive statistical analysis with columns:
#       * transition: (activity_from, activity_to) pairs
#       * feature: specific metric that changed (varies based on user configuration)
#       * perspective: control_flow (always), time, resource, data (if configured)
#       * transition_status: new, deleted, significant difference
#       * activity_status: new, deleted, no change
#       * p_value, effect_size: statistical significance and magnitude
#       * ref_value, det_value, dif_value: before, after, and difference values
#       Use for detailed evidence of what changed across available perspectives.
#   - change_informations: High-level summary of new/deleted activities and transitions.
#       Use for a quick overview of structural changes.
#   - reference_bpmn_text: BPMN structure (process model) before the change.
#       Use for control-flow structure and operators before the change. Note: This is a process model that may have limitations.
#   - detection_bpmn_text: BPMN structure (process model) after the change.
#       Use for control-flow structure and operators after the change. Note: This is a process model that may have limitations.
#   - controlflow_change_patterns: Known control-flow change patterns (dict of pattern descriptions).
#       Use to help the LLM recognize and classify change patterns.
#
# - You can add any other key from this YAML file to include custom information.
# ------------------------------------------------------------------------------
sources:
#   - reference_transition_matrix
#   - detection_transition_matrix
    - high_level_changes
    - reference_bpmn_text
    - detection_bpmn_text
#   - significant_transition_changes
    - controlflow_change_patterns
  # Add any other keys from this YAML file here to include them in the prompt

# ------------------------------------------------------------------------------
# MAIN INSTRUCTIONS
# This is the core instruction text that is ALWAYS included in the LLM prompt.
# It provides the framework, analysis guidelines, and output structure for the
# characterization task. This section defines how the LLM should analyze the
# provided information sources and structure its response.
# ------------------------------------------------------------------------------
main_instructions: |
    ### Introduction ###
    You are a technical analyst specializing in concept drift in process mining. 
    Your primary role is to investigate the phenomenon of concept drift by comparing two distinct phases of a business process: the reference window (before the change) and the detection window (after the change).

    ### BPMN Diagrams Comparison ###
    You will be provided with detailed BPMN diagrams for both time frame (reference and detection windows).

    Familiarize yourself with the BPMN symbols used in the diagrams:
        - Control-flow operators:
            - Sequence branchs are denoted by 'Sequence'. Each item in a sequence branch will be executed in order.
            - Parallel branchs by 'Parallel'. Each item in a parallel branch will be executed, but not necessarily in order.
            - Conditional branchs by 'Conditional'. Only one item in a conditional branch will be executed.
            - Looping branchs by 'Loop'. Loop branch is similar with Sequence branch, but the last item in the sequence can lead to a new iteration of the loop.
        - Silent transitions are indicated by 'tau'. This acts as a fake activity to be executed in the process. If it is in a Conditional branch, that means that all other items in the branch can be skipped.
        - Nested branchs are enclosed in parentheses '()'.
        - Items within a branch are separated by commas.
    For example: 
        - In the BPMN diagram notation Sequence(A, Conditional(B, Sequence(C, D)), E), the structure is as follows:
            - The outermost branch is a Sequence branch, indicating that its components follow one after another.
            - Within this Sequence branch, there are three main items:
                - 'A' is a standalone activity.
                - A conditional branch that contains further nested activities and branchs. Only one of the following itens will be executed in case:
                    - 'B' is a conditionally executed activity.
                    - A nested Sequence branch, containing activities 'C' and 'D'.
                - 'E' is another activity that is part of the outermost Sequence branch, following the conditional branch.

    Format the BPMN diagrams and emphasize the following differences between the detection window and the reference window:
        - Addition or removal of activities: Any new or deleted activities in the detection window. 
            - Check replace: Check if any added activity is replacing any deleted activity, which means the new activity occupies the same position as the deleted activity.
        - Addition or removal of control-flow operators: Any new or deleted of control-flow operators in the detection window, such as Sequences, parallels, conditionals and loops branchs.
        - Movements of items within Sequence branchs: Any movements of activities or branchs within Sequence branchs in the detection window. 
            - Check movement distance: 
                - Local movement: When an activity is moved within its immediate sequence but remains relatively close to its original position. The activity, or the branch it was inserted in, remains connected to the same or adjacent activities or branchs.
                - Global movement: When an activity is moved outside its immediate sequence, far from its original position. The activity, or the branch it was inserted in, is not connected to the same or adjacent activities or branchs.
            - Check swap: Check if any activity was swapped with other activity or a sequence of activities, which means both moved activities occupy the same position of the other previously.
        - Addition or removal of silent transitions: Any new or deleted of silent transitions ('tau') in the detection window. 
            - Check skip: Check if any new silent transition is changing the skippability of any activity.
        - Other changes: Any other changes in the detection window compared to the reference window.

    - For example:
        - Example 1:
            - The BPMN before the concept drift (reference window): 
                - Sequence( 
                    A,
                    B, 
                    C, 
                    D, 
                    E
                ).
            - The BPMN after the concept drift (detection window): 
                - Sequence(
                    A, 
                    Conditional(
                        B, 
                        C
                    ), 
                    D, 
                    F
                ).
            - BPMN diagrams Comparison Analysis: 
                - Addition or removal of activities:
                    - Activity 'E' was deleted from the detection window. It was after activity 'D' and the last item in the outermost Sequence branch.
                    - Activity 'F' was added to the detection window. It is after activity 'D' and the last item in the outermost Sequence branch.
                    - Check replace: The new activity 'F' is replacing the deleted activity 'E', since they occupy the same position after activity 'D' and the last item in the outermost Sequence branch.
                - Addition or removal of control-flow operators: 
                    - A new Conditional branch was added to the detection window. It is after activity 'A' and before activity 'D' in the outermost Sequence branch. It includes activity 'B' in one branch and activity 'C' in the other branch. 
                - Movements of items within Sequence branchs: 
                    - Activity 'B' was moved in the detection window. It was after activity 'A' and before activity 'C' in the outermost Sequence branch. Now it is inside the added Conditional branch after activity 'A' and before activity 'D' in the outermost Sequence branch.
                        - Check movement distance: The Conditional branch that activity 'B' was inserted in, remains connected to the same or adjacent activities that activity 'B' had in the detection window, so the movement distance is local.
                    - Activity 'C' was moved in the detection window. It was after activity 'B' and before activity 'D' in the outermost Sequence branch. Now it is inside the added Conditional branch after activity 'A' and before activity 'D' in the outermost Sequence branch.
                        - Check movement distance: The Conditional branch that activity 'C' was inserted in, remains connected to the same or adjacent activities that activity 'C' had in the detection window, so the movement distance is local.
                    - Check swap: No activity was swapped.
                - Addition or removal of silent transitions: 
                    - No silent transition ('tau') was added or removed.
                - Other changes: 
                    - No other changes were made.

        - Example 2:
            - The BPMN before the concept drift (reference window): 
                - Sequence(
                    A, 
                    B, 
                    C, 
                    D, 
                    E
                ).
            - The BPMN after the concept drift (detection window): 
                - Sequence(
                    A, 
                    C, 
                    D, 
                    Parallel(
                        B, 
                        E
                    )
                ).
            - BPMN diagrams Comparison Analysis: 
                - Addition or removal of activities:
                    - No activity was added or removed.
                - Addition or removal of control-flow operators: 
                    - A new Parallel branch was added to the detection window. It is after activity 'D' and the last item in the outermost Sequence branch. It includes activity 'B' in one branch and activity 'E' in the other branch. 
                - Movements of items within Sequence branchs: 
                    - Activity 'B' was moved in the detection window. It was after activity 'A' and before activity 'C' in the outermost Sequence branch. Now it is inside the added Parallel branch after activity 'D' and the last item in the outermost Sequence branch.
                        - Check movement distance: The Parallel branch that activity 'B' was inserted in, is not connected to the same or adjacent activities that activity 'B' had in the detection window, so the movement distance is global.
                    - Activity 'E' was moved in the detection window. It was after activity 'D' and the last item in the outermost Sequence branch. Now it is inside the added Parallel branch after activity 'D' and the last item in the outermost Sequence branch.
                        - Check movement distance: The Parallel branch that activity 'E' was inserted in, remains connected to the same or adjacent activities that activity 'B' had in the detection window, so the movement distance is local.
                    - Check swap: No activity was swapped.
                - Addition or removal of silent transitions: 
                    - No silent transition ('tau') was added or removed.
                - Other changes: 
                    - No other changes were made.

        - Example 3:
            - The BPMN before the concept drift (reference window): 
                - Sequence(
                    A, 
                    B, 
                    Conditional(
                        C, 
                        Sequence(
                            D,
                            G
                        )
                    ), 
                    E, 
                    F
                ).
            - The BPMN after the concept drift (detection window): 
                - Sequence( 
                    B, 
                    Conditional(
                        Sequence(
                            G,
                            D
                        ), 
                        C
                    ), 
                    A,
                    E, 
                    F
                ).
            - BPMN diagrams Comparison Analysis: 
                - Addition or removal of activities:
                    - No activity was added or removed.
                - Addition or removal of control-flow operators: 
                    - No control-flow operators were added or removed.
                - Movements of items within Sequence branchs: 
                    - Activity 'A' was moved in the detection window. It was before activity 'B' and the first item in the outermost Sequence branch. Now it is after a Conditional branch and before activity 'E' in the outermost Sequence branch.
                        - Check movement distance: Activity 'A' is not connected to the same or adjacent activities it had in the detection window, so the movement distance is global.
                    - Activity 'D' was moved in the detection window. It was before activity 'G' and the first item in the Sequence branch inside the Conditional branch after activity 'B' and before activity 'E' in the outermost Sequence branch. Now it is after activity 'G' and the last item in the Sequence branch inside the Conditional branch after activity 'B' and before activity 'A' in the outermost Sequence branch.
                        - Check movement distance: Activity 'D' is connected to the same or adjacent activities it had in the detection window, so the movement distance is local.
                    - Activity 'G' was moved in the detection window. It was before activity 'D' and the last item in the Sequence branch inside the Conditional branch after activity 'B' and before activity 'E' in the outermost Sequence branch. Now it is before activity 'D' and the first item in the Sequence branch inside the Conditional branch after activity 'B' and before activity 'A' in the outermost Sequence branch.
                        - Check movement distance: Activity 'G' is connected to the same or adjacent activities it had in the detection window, so the movement distance is local.
                    - Check swap: Activity 'D' and 'G' were swapped, since they occupy the same position of the other in the detection window.
                - Addition or removal of silent transitions: 
                    - No silent transition ('tau') was added or removed.
                - Other changes: 
                    - No other changes were made.

    ### Change Pattern Analysis ###
    After conducting the BPMN diagrams comparison analysis, you will also be provided with:
        - Transition and Activities Changes List: Lists showing all activities and transitions changes between the reference and detection windows.
        - Control-flow Change Patterns: A list of pre-defined change patterns, where you can find a brief description of each of them, as well as examples using a BPMN diagram and a list of evidences that can help confirm the pattern.

    Combining all information analyzed, match them with the list of pre-defined change patterns, showing the evidence of the change pattern in the analysis.
    Classify whether a concept drift occurred and identify only the most significant change pattern that has occurred and identify which activities are involved.
    Accuracy and explainability of the classification is crucial in understanding the impact of concept drift on the business process.

    ### Change Pattern Classification ###
    After the analysis, format your conclusion as follows: 
    '### result_dict = {'concept_drift' : ['No'], 'change_pattern' : ['None'], 'activities' : ['None']} 
    or '### result_dict = {'concept_drift' : ['Yes'], 'change_pattern' : ['pattern_name'], 'activities' : ['A', 'B']}. 

# ------------------------------------------------------------------------------
# CONTROL-FLOW CHANGE PATTERNS (Custom Source)
# This section contains the instructions for the control-flow change patterns.
# It includes the instructions for each pattern and the evidence to be used to
# identify the pattern.
# ------------------------------------------------------------------------------
controlflow_change_patterns:
    Serial-Removal:
         - If the new activity is added in a Sequence branch between two existing activities or the deleted activity was in a Sequence branch between two existing activities then is Serial-Removal pattern. 
         - For example, the BPMN diagram could change from 'Sequence(A, B)' to 'Sequence(A, C, B)' or vice versa, where C is the activity involved.
         - Evidence:
             - New or deleted activity in a Sequence branch in BPMN diagram comparison.
             - New or deleted activity in the list of variations.
    
    Parallel-Removal:
         - If the new activity is added in a Parallel branch or the deleted activity was in a Parallel branch then is Parallel-Removal pattern.
         - For example, the BPMN diagram could change from 'Sequence(A, B, C)' to 'Sequence(A, Parallel(B, D), C)' or vice versa, where D is the activity involved.
         - Evidence:
             - New or deleted activity in a Parallel branch in BPMN diagram comparison.
             - New or deleted activity in the list of variations.
    
    Conditional-Removal:
         - If the new activity is added in a conditional branch or the deleted activity was in a conditional branch then is Conditional-Removal pattern. 
         - For example, the BPMN diagram could change from 'Sequence(A, B, C)' to 'Sequence(A, Conditional(B, D), C)' or vice versa, where D is the activity involved.
         - Evidence:
             - New or deleted activity in a Conditional branch in BPMN diagram comparison.
             - New or deleted activities in the list of variations.
    
    Replace:
         - If the new activity is in the exactly place as the deleted then is Replace pattern. 
         - For example, the BPMN diagram could change from 'Sequence(A, B, C)' to 'Sequence(A, D, C)', where B and D are the activities involved.
         - Evidence:
             - Activities replaced in the BPMN diagram comparison.
             - Both new and deleted activities in any branch in BPMN diagram comparison.
             - Both new and deleted activities in the list of variations.

    Serial-Move:
         - If an activity has moved globally in the BPMN diagram into a Sequence branch between two existing activities then is Serial-Move pattern.
         - For example, the BPMN diagram could change from 'Sequence(A, B, C, D, E)' to 'Sequence(A, C, D, B, E)', where B is the activity involved.
         - Evidence:
             - New or deleted Sequence branch in BPMN diagram comparison.
             - Activity moved globally to or from a Sequence branch in BPMN diagram comparison.
             - Both new and deleted transitions in the list of variations involving the moved activity.
             
    
    Parallel-Move:
         - If an activity has moved globally in the BPMN diagram into a Parallel branch then is Parallel-Move pattern. 
         - For example, the BPMN diagram could change from 'Sequence(A, B, C, D, E, F)' to 'Sequence(A, C, D, Parallel(B, E), F)', where B were moved ahead in the diagram an inserted in a new Parallel branch with activity E.
         - Evidence:
             - New or deleted Parallel branch in BPMN diagram comparison.
             - Activity moved globally to or from a Parallel branch in BPMN diagram comparison.
             - Both new and deleted transitions in the list of variations involving the moved activity.
    
    Conditional-Move:
         - If an activity has moved globally in the BPMN diagram into a Conditional branch then is Conditional-Move pattern.
         - For example, the BPMN diagram could change from 'Sequence(A, B, C, D, E, F)' to 'Sequence(A, C, D, Conditional(B, E), F)', where B were moved ahead in the diagram an inserted in a new Conditional branch with activity E.
         - Evidence:
             - New or deleted Conditional branch in BPMN diagram comparison.
             - Activity moved globally to or from a Conditional branch in BPMN diagram comparison.
             - Both new and deleted transitions in the list of variations involving the moved activity.
    
    Swap:
         - If two activities or two combinations of activities were swapped in the BPMN diagram then is Swap pattern.
         - For example:
            - The BPMN diagram could change from 'Sequence(A, B, C, D, E, F, G, H)' to 'Sequence(A, G, D, E, F, B, C, H)', where activities B and C were moved to the exact position of G, and G were moved to the exact position of B and C.
            - The BPMN diagram could change from 'Sequence(A, Parallel(B, C), D)' to 'Sequence(Parallel(B, C), A, D)', where activities A were moved to the exact position of the Parallel branch Parallel(B, C) and Parallel(B, C) were moved to the exact position of A.
         - Evidence:
             - Activities swapped in BPMN diagram comparison.
             - Activities moved in the BPMN diagram comparison.
             - Both new and deleted transitions in the list of variations involving the swapped activities.

    Parallel-To-Sequence:
         - If two connected activities moved from a Sequence to a Parallel branch or from a Parallel to Sequence then is Parallel-To-Sequence pattern. 
         - For example, the BPMN diagram could change from 'Sequence(A, B, C, D)' to 'Sequence(A, Parallel(B, C), D)' or vice versa, where B and C were just inserted in a new Parallel branch.
         - Evidence:
             - New or deleted Parallel branch in BPMN diagram comparison.
             - Activity moved locally to or from a Parallel branch in BPMN diagram comparison.
             - New (and sometimes deleted) transitions in the list of variations involving the activities included to or excluded from the Parallel branch.
    
    Conditional-To-Sequence:
         - If two connected activities moved from a Sequence to a Conditional branch or from a Conditional to Sequence then is a Conditional-To-Sequence pattern.
         - For example, the BPMN diagram could change from 'Sequence(A, B, C, D)' to 'Sequence(A, Conditional(B, C), D)' or vice versa, where B and C were just inserted in a new Conditional branch.
         - Evidence:
             - New or deleted Conditional branch in BPMN diagram comparison.
             - Activity moved locally to or from a Conditional branch in BPMN diagram comparison.
             - New (and sometimes deleted) transitions in the list of variations involving the activities included to or excluded from the Conditional branch.

    Control-Dependency:
         - If a Parallel branch is restructured, involving a reordered sequence of activities,then is Control-Dependency pattern. 
         - For example, the BPMN diagram could change from 'Sequence(A, Parallel(B, Sequence(C, D)), E)' to 'Sequence(A, Sequence(Parallel(B, C), D), E)' or vice versa, where B, C, and D are the activities involved.
         - Evidence:
             - Parallel branch is restructured in BPMN diagram comparison, involving a reordered sequence of activities, or it could be represented as a new Parallel branch.
             - Activities were in a Parallel branch and now they are sequence within this Parallel branch or one of them is outside the branch but the right next activity.
             - New and deleted transitions in the list of variations involving the activities involved in the restructured branch.
             - Involved activities moved locally inside the Parallel branch or globally outside the Parallel branch but nearby the Parallel branch.

    Skip:
         - If a new transition is making any non-skippable activity become now skippable or making any skippable activity become now non-skippable then is Skip pattern. 
         - For example, the BPMN diagram could change from 'Sequence(A, B, C)' to 'Sequence(A, Conditional(B, 'tau'), C)' or vice versa, where B is the activity involved.
         - Evidence:
             - New or deleted transitions in the list of variations involving activities that isn't right next to the other in BPMN diagram.
             - May be a new or deleted conditional branch in BPMN diagram comparison with a silent transition ('tau'). Sometimes the silent transitions ('tau') will not be detect correctly, so rely on the new or deleted transitions in the list of variations.
             - Involved activities moved locally.
    
    Loop:
         - If there is new or deleted loop branch where the relational dynamics among the activities involved remain fundamentally unchanged, except for the alteration in their loopability then is Loop pattern. 
         - For example, the BPMN diagram could change from 'Sequence(A, B, C, D, E)' to 'Sequence(A, Loop(B, C, D), E)' or vice versa or vice versa, where B, C, and D are the activities involved.
         - Evidence:
             - New or deleted Loop branch in BPMN diagram comparison.
             - New and deleted transitions in the list of variations involving the activities in the new or deleted loop.
             - Involved activities moved locally to or from a Loop branch in BPMN diagram comparison.
             - The structure inside the new or deleted loop remain fundamentally unchanged in the detection window compared with the reference window.

    Frequency:
         - If there are transitions with variances without control-flow changes, then is Frequency pattern. 